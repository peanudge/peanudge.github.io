"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=o,k=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},r="C# Development Environment (Lint, Formatter)",l={unversionedId:"csharp/csharp-dev-environment",id:"csharp/csharp-dev-environment",title:"C# Development Environment (Lint, Formatter)",description:"Development Environment (Lint, Formatter)",source:"@site/docs/csharp/csharp-dev-environment.md",sourceDirName:"csharp",slug:"/csharp/csharp-dev-environment",permalink:"/docs/csharp/csharp-dev-environment",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"CSharp",permalink:"/docs/category/csharp"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Install .NET 6.0 SDK and <code>dotnet</code> CLI",id:"install-net-60-sdk-and-dotnet-cli",level:2},{value:"Install C# VSCode extension (powered by Omnisharp)",id:"install-c-vscode-extension-powered-by-omnisharp",level:2},{value:"C# Auto Formatting",id:"c-auto-formatting",level:2},{value:"First, set default formatter as C#",id:"first-set-default-formatter-as-c",level:3},{value:"Format CLI Command (<code>dotnet-format</code>)",id:"format-cli-command-dotnet-format",level:3},{value:"Customizing our formatting rule.",id:"customizing-our-formatting-rule",level:3},{value:"Create new naming Rule - Private Method Name should be camel case!",id:"create-new-naming-rule---private-method-name-should-be-camel-case",level:3},{value:"\u2708\ufe0f Auto formatting using git-hook (<code>husky</code>, <code>lint-staging</code>)",id:"\ufe0f-auto-formatting-using-git-hook-husky-lint-staging",level:2}],m={toc:p};function d(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"c-development-environment-lint-formatter"},"C# Development Environment (Lint, Formatter)"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Install .NET SDK"),(0,o.kt)("li",{parentName:"ul"},"Add C# VSCode extension using ",(0,o.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp"},(0,o.kt)("inlineCode",{parentName:"a"},"Omnisharp"))),(0,o.kt)("li",{parentName:"ul"},"C# Auto Formatter using ",(0,o.kt)("inlineCode",{parentName:"li"},"lint-staged")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"husky")),(0,o.kt)("li",{parentName:"ul"},"C# Lint using dotnet naming rule in ",(0,o.kt)("inlineCode",{parentName:"li"},".editorconfig")),(0,o.kt)("li",{parentName:"ul"},"Look up default Microsoft CodingStyle Rule"),(0,o.kt)("li",{parentName:"ul"},"Add Additional Custom Microsoft CodingStyle Rule")),(0,o.kt)("h2",{id:"install-net-60-sdk-and-dotnet-cli"},"Install .NET 6.0 SDK and ",(0,o.kt)("inlineCode",{parentName:"h2"},"dotnet")," CLI"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you learn about C#, Recommend installing .NET 7.0 !!\nBut, I installed version 6.0 because my company use .NET 6.0 as LTS")),(0,o.kt)("p",null,"Go following link and install"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.408-macos-x64-installer"},"https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.408-macos-x64-installer")),(0,o.kt)("p",null,"After install .NET SDK, check version using follow cli."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u279c ~ dotnet --version\n6.0.408\n")),(0,o.kt)("p",null,"if you want to force cli language as english"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ set DOTNET_CLI_UI_LANGUAGE=en\n$ dotnet --help\n")),(0,o.kt)("p",null,"if you do not like to typing above command whenever open terminal, set in ",(0,o.kt)("inlineCode",{parentName:"p"},".bashrc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},".zshrc")," in case of me."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# DOT NET Development\nexport DOTNET_CLI_UI_LANGUAGE=en\n")),(0,o.kt)("p",null,"Next, we will talk about development environment using VSCode."),(0,o.kt)("h2",{id:"install-c-vscode-extension-powered-by-omnisharp"},"Install C# VSCode extension (powered by Omnisharp)"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"C# vscode extension logo",src:n(1741).Z,width:"1320",height:"436"})),(0,o.kt)("p",null,"Install ",(0,o.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp"},"C# extension for Visual Studio Code!")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"lightweight development tools for .NET"),(0,o.kt)("li",{parentName:"ul"},"Greate C# editing support, including Syntax Highlighting, IntelliSense, Go to Definition, Find All References, etc"),(0,o.kt)("li",{parentName:"ul"},"Debuging support for .NET(Core CLR)."),(0,o.kt)("li",{parentName:"ul"},"Support for ",(0,o.kt)("inlineCode",{parentName:"li"},"project.json")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"csproj")," projects")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"What is OmniSharp?"),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},".NET development platform based on Roslyn workspaces.\nIt provides project dependencies and C# Language services to various IDEs and plugins")),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"http://www.omnisharp.net/"},"Friendly definition"),": OmniSharp is a family of Open Source projects, each with one goal: To enable a greate .NET experience in YOUR editor of choice")),(0,o.kt)("h2",{id:"c-auto-formatting"},"C# Auto Formatting"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Reference: ",(0,o.kt)("a",{parentName:"p",href:"https://johnnyreilly.com/prettier-your-csharp-with-dotnet-format-and-lint-staged"},"https://johnnyreilly.com/prettier-your-csharp-with-dotnet-format-and-lint-staged"))),(0,o.kt)("p",null,"When code review, consistent code formatting provide better performance for developer. We can focus more important things."),(0,o.kt)("p",null,"if you have experience about javascript development using vscode, you know that ",(0,o.kt)("inlineCode",{parentName:"p"},"prettier")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"eslint")," provide good dev experience."),(0,o.kt)("p",null,"Likewise, C# ecosystem can provide similar experience using OmniSharp(C# VScode extension) and ",(0,o.kt)("inlineCode",{parentName:"p"},"dotnet format")," CLI."),(0,o.kt)("h3",{id:"first-set-default-formatter-as-c"},"First, set default formatter as C#"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"set default formatter",src:n(4207).Z,width:"1390",height:"770"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Change ",(0,o.kt)("inlineCode",{parentName:"p"},"Null")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"C#")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Setting >  Editor:Default Formatter")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if you can not find C# Formatter, check above installing C# vscode extension."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Check on ",(0,o.kt)("inlineCode",{parentName:"p"},"Setting >  Editor:Format On Save")))),(0,o.kt)("h3",{id:"format-cli-command-dotnet-format"},"Format CLI Command (",(0,o.kt)("inlineCode",{parentName:"h3"},"dotnet-format"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/dotnet/format"},(0,o.kt)("inlineCode",{parentName:"a"},"dotnet-format"))," is a code formatter for dotnet that applies style preferences to a project or solution. Preferences will be read from ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," file, if present, otherwise a default set of preferences will be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet tool install -g dotnet-format\n")),(0,o.kt)("p",null,"we need to set the following in our ",(0,o.kt)("inlineCode",{parentName:"p"},"settings.json")," in vscode.\n(if workspace setting, ",(0,o.kt)("inlineCode",{parentName:"p"},".vscode/settings.json"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "omnisharp.enableRoslynAnalyzers": true,\n  "omnisharp.enableEditorConfigSupport": true\n}\n')),(0,o.kt)("p",null,"and (cmd + p) after ",(0,o.kt)("inlineCode",{parentName:"p"},"OmniSharp: Restart OmniSharp"),"."),(0,o.kt)("p",null,"Finally, we can explicitly format C# source files using CLI and see warnings about coding style."),(0,o.kt)("p",null,"Following command formats code to match ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," settings.\n(If the file does not exist, it is processed with the default settings.)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet format\n")),(0,o.kt)("h3",{id:"customizing-our-formatting-rule"},"Customizing our formatting rule."),(0,o.kt)("p",null,"Until above step, we could format using default formatting rules."),(0,o.kt)("p",null,"if you want to change formatting rule, create ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," and edit it."),(0,o.kt)("p",null,"but, we can simply add default ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," using following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ dotnet new editorconfig\n")),(0,o.kt)("p",null,"and you can see created ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," file that has so many rule."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"you can find how to create, update customizing naming rule"),(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules"},"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules")))),(0,o.kt)("p",null,"Let make new naming rule!"),(0,o.kt)("h3",{id:"create-new-naming-rule---private-method-name-should-be-camel-case"},"Create new naming Rule - Private Method Name should be camel case!"),(0,o.kt)("p",null,"Default ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig")," did not define naming about private method naming."),(0,o.kt)("p",null,"Lets assume that we want to add ",(0,o.kt)("strong",{parentName:"p"},"private method camel case rule"),"."),(0,o.kt)("p",null,"Add following custom rule(",(0,o.kt)("inlineCode",{parentName:"p"},"private_methods_should_be_camelcase"),"), symbol(",(0,o.kt)("inlineCode",{parentName:"p"},"private_methods"),") in ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'\n...\n\n# Add naming rule\n\ndotnet_naming_rule.private_methods_should_be_camelcase.severity = warning\ndotnet_naming_rule.private_methods_should_be_camelcase.symbols = private_methods\ndotnet_naming_rule.private_methods_should_be_camelcase.style = camelcase\n\n# Define symbol "private_methods"\n\ndotnet_naming_symbols.private_methods.applicable_kinds = method\ndotnet_naming_symbols.private_methods.applicable_accessibilities = private\ndotnet_naming_symbols.private_methods.required_modifiers =\n')),(0,o.kt)("p",null,"if you modify ",(0,o.kt)("inlineCode",{parentName:"p"},".editorconfig"),", we can use new lint warning."),(0,o.kt)("h2",{id:"\ufe0f-auto-formatting-using-git-hook-husky-lint-staging"},"\u2708\ufe0f Auto formatting using git-hook (",(0,o.kt)("inlineCode",{parentName:"h2"},"husky"),", ",(0,o.kt)("inlineCode",{parentName:"h2"},"lint-staging"),")"),(0,o.kt)("p",null,"For enforce code quality, we can auto-formatting when commit."),(0,o.kt)("p",null,"we need to ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"husky"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"lint-staging"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\nnpm init --yes\n\n")),(0,o.kt)("p",null,"and we will install ",(0,o.kt)("inlineCode",{parentName:"p"},"husky")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"lint-staged")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir .husky\n$ npx husky-init && npm install\n$ npm install lint-staged --save-dev\n")),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"npm text")," to `",(0,o.kt)("inlineCode",{parentName:"p"},"in"),".husky/pre-commit`"),(0,o.kt)("p",null,"in ",(0,o.kt)("inlineCode",{parentName:"p"},".husky/pre-commit")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env sh\n. "$(dirname -- "$0")/_/husky.sh"\n\n# npm test\nnpx lint-staged --relative\n')),(0,o.kt)("p",null,"Finally we add the following entry to the package.json"),(0,o.kt)("p",null,"in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ...\n  "lint-staged": {\n    "*.cs": "dotnet format --include"\n  }\n}\n')),(0,o.kt)("p",null,"Done!, We can auto formatting whenever commit."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"auto-formatting",src:n(1588).Z,width:"920",height:"388"})),(0,o.kt)("h1",{id:"end"},"End"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/peanut-lover/csharp-auto-format-template"},"https://github.com/peanut-lover/csharp-auto-format-template")),(0,o.kt)("h1",{id:"reference"},"Reference"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://johnnyreilly.com/prettier-your-csharp-with-dotnet-format-and-lint-staged#dotnet-format-a-new-hope"},"https://johnnyreilly.com/prettier-your-csharp-with-dotnet-format-and-lint-staged#dotnet-format-a-new-hope"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://johnnyreilly.com/eslint-your-csharp-in-vs-code-with-roslyn-analyzers"},"https://johnnyreilly.com/eslint-your-csharp-in-vs-code-with-roslyn-analyzers"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"MS Dotnet Naming Rule\n",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options"},"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options"))))}d.isMDXComponent=!0},1588:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/auto-formatting-dd6f20ca5f7adf3782385ad41d52c751.png"},1741:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/csharp-vscode-extension-8cccd4192d302ea432e98b7a4c5e39e1.png"},4207:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/set-default-formatter-a145e5cbaa1c83c5f4f98518a1b52b89.png"}}]);